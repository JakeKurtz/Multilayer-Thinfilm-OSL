/* ------------------------------------------------------------------------- *
*
*    Copyright (C) 2024 Jake Kurtz
*
*    This program is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program. If not, see <https://www.gnu.org/licenses/>.
*
* ------------------------------------------------------------------------- */

#include "spectral.h"
#include "thinfilm.h"
#include "complex.h"
#include "ior.h"

#define LAYERS 3
#define SPECTRAL

void thin_film(float lambda, complex n[LAYERS], float d[LAYERS], complex cos_theta[LAYERS], output float R, output float T)
{
    cmatrix22 Ts = identity();
    cmatrix22 Tp = identity();

    float d_i;

    complex n_i; complex ct_i;
    complex n_j; complex ct_j;

    complex rs_ij; complex ts_ij;
    complex rs_ji; complex ts_ji;
    complex rp_ij; complex tp_ij;
    complex rp_ji; complex tp_ji;

    for (int i = 0; i < LAYERS-1; i++) 
    {
        d_i = d[i];

        n_i = n[i];   ct_i = cos_theta[i];
        n_j = n[i+1]; ct_j = cos_theta[i+1];

        compute_fresnel(
            n_i,   n_j,   ct_i,  ct_j,
            rp_ij, rs_ij, tp_ij, ts_ij
        );
        compute_fresnel(
            n_j,   n_i,   ct_j,  ct_i,
            rp_ji, rs_ji, tp_ji, ts_ji
        );

        cmatrix22 Ds_ij = D_mat(rs_ij, rs_ji, ts_ij, ts_ji);
        cmatrix22 Dp_ij = D_mat(rp_ij, rp_ji, tp_ij, tp_ji);
        cmatrix22 P_i = P_mat(lambda, n_i, d_i, ct_i);

        Ts = Ts*P_i*Ds_ij;
        Tp = Tp*P_i*Dp_ij;
    }
    
    complex r_s = Ts.t10 / Ts.t00;
    complex r_p = Tp.t10 / Tp.t00;

    complex t_s = 1.0 / Ts.t00;
    complex t_p = 1.0 / Tp.t00;

    float R_s = modulus_sqrd(r_s);
    float R_p = modulus_sqrd(r_p);

    complex x = n[LAYERS-1] * cos_theta[LAYERS-1];
    complex y = conjugate(n[LAYERS-1]) * cos_theta[LAYERS-1];
    float z = n[0].r * cos_theta[0].r;

    float T_s = (modulus_sqrd(t_s) * x.r) / z;
    float T_p = (modulus_sqrd(t_p) * y.r) / z;

    R = (R_s + R_p) * 0.5;
    T = (T_s + T_p) * 0.5;
}

void sample_interfaces(float lambda, float sin_theta_0, IOR ior[LAYERS], output complex n[LAYERS], output complex cos_theta[LAYERS])
{
    n[0] = sample_IOR(lambda, ior[0]);
    n[1] = sample_IOR(lambda, ior[1]);
    n[2] = sample_IOR(lambda, ior[2]);

    cos_theta[1] = cos_theta_i(n[1], n[0], sin_theta_0);
    cos_theta[2] = cos_theta_i(n[2], n[0], sin_theta_0);
}

shader ThinFilm
(
/* -------------------------------------------------------------------------- */
/*                                   Inputs                                   */
/* -------------------------------------------------------------------------- */

    color film_0_n = 1.475
    [[ 
        string help = "",
        string label = "Film IOR",
        color min = 0,
        color max = 25
    ]],
    
    color film_0_k = 0.0
    [[ 
        string help = "",
        string label = "Film Extinction",
        color min = 0,
        color max = 1
    ]],
    
    float film_0_d = 500.0
    [[ 
        string help = "",
        string label = "Film Thickness",
        float min = 0,
        float max = 5000
    ]],
    
    color base_n = 1.5
    [[ 
        string help = "",
        string label = "Base IOR",
        color min = 0,
        color max = 25
    ]],
    
    color base_k = 0.0
    [[ 
        string help = "",
        string label = "Base Extinction",
        color min = 0,
        color max = 1
    ]],
    
    float r = 0.0
    [[ 
        string help = "",
        string label = "Roughness",
        float min = 0.0,
        float max = 1.0
    ]],

    normal Normal = N
    [[ 
        string label = "Normal"
    ]],

/* -------------------------------------------------------------------------- */
/*                                   Outputs                                  */
/* -------------------------------------------------------------------------- */

    output color R = color(1.0)
    [[
		string help = ""
	]],

    output color T = color(0.0)
    [[
		string help = ""
	]]
)
{
    float d[LAYERS];

    d[0] = INFINITE;
    d[1] = film_0_d;
    d[2] = INFINITE;

    complex n[LAYERS]; IOR ior[LAYERS];
    complex cos_theta[LAYERS];

    color eta_0 = backfacing() ? 1.0/film_0_n : film_0_n;
    color eta_1 = backfacing() ? 1.0/base_n : base_n;

    ior[0] = IOR(color(1.0), color(0.0));
    ior[1] = IOR(eta_0, film_0_k);
    ior[2] = IOR(eta_1, base_k);

    vector wo = I;
    vector wi = sample_wi(r, wo, Normal, P);
    vector h = normalize(wo + wi);

    cos_theta[0] = complex(max(dot(h, wo), EPSILON), 0.0);
    float sin_theta_0 = sqrt(1.0 - pow(cos_theta[0].r, 2.0));

#ifdef SPECTRAL
    float lambda_samples[LAMBDA_SAMPLES];
    gen_lambda_samples(P, lambda_samples);

    float spec_R[LAMBDA_SAMPLES];
    float spec_T[LAMBDA_SAMPLES];

    for (int i = 0; i < LAMBDA_SAMPLES; i++) {
        sample_interfaces(lambda_samples[i], sin_theta_0, ior, n, cos_theta);
        thin_film(lambda_samples[i], n, d, cos_theta, spec_R[i], spec_T[i]);
    }

    color rgb_R = SPEC_to_sRGB(spec_R, lambda_samples);
    color rgb_T = SPEC_to_sRGB(spec_T, lambda_samples);

    R = rgb_R;
    T = rgb_T;
#else
    float lambda_samples[3] = {650.0, 532.0, 450.0};

    float spec_R[3];
    float spec_T[3];

    for (int i = 0; i < 3; i++) {
        sample_interfaces(lambda_samples[i], sin_theta_0, ior, n, cos_theta);
        thin_film(lambda_samples[i], n, d, cos_theta, spec_R[i], spec_T[i]);
    }

    R = color(spec_R[0], spec_R[1], spec_R[2]);
    T = color(spec_T[0], spec_T[1], spec_T[2]);
#endif
}